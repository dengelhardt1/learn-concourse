---
resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: resource-tutorial
    type: git
    icon: github
    source:
      uri: ((github-resource-tutorial)) # get credentials from credentials-file
      branch: ((branch-resource-tutorial)) # get credentials from credentials-file

  - name: resource-s3-file-1
    type: s3
    icon: database
    source:
      bucket: ((s3-bucket-1))  # get credentials from credentials-file
      regexp: ((filename-1))-(.*).txt
      access_key_id: ((s3-access-key)) # get credentials from vault
      secret_access_key: ((s3-access-secret)) # get credentials from vault
      endpoint: ((s3-endpoint)) # get credentials from vault
      disable_ssl: true
      use_v4: true

  - name: resource-s3-file-2
    type: s3
    icon: database
    source:
      bucket: ((s3-bucket-2)) # get credentials from credentials-file
      regexp: ((filename-2))-(.*).txt
      access_key_id: ((s3-access-key)) # get credentials from vault
      secret_access_key: ((s3-access-secret)) # get credentials from vault
      endpoint: ((s3-endpoint)) # get credentials from vault
      disable_ssl: true
      use_v4: true
  
  - name: image-resource
    type: docker-image
    icon: docker
    source: {repository: ((image-resource))} # get credentials from credentials-file

  - name: notify
    type: slack-notification
    icon: message-alert
    source:
      url: ((slack-webhook)) # get credentials from vault

jobs:
  - name: create-file-1-put-on-s3-bucket
    public: true
    serial: true
    plan:
      - get: image-resource
      - get: resource-tutorial
        #trigger: true    
      - task: create-output-file
        image: image-resource
        file: resource-tutorial/tasks/task_create_output.yml
        params:
          COMMAND: "((command-1))" # get credentials from credentials-file
          FILENAME: "((filename-1))" # get credentials from credentials-file
      - put: resource-s3-file-1
        params:
          file: /outputs/((filename-1))-*.txt # get credentials from credentials-file
          acl: public-read

  - name: create-file-2-put-on-s3-bucket
    public: true
    serial: true
    plan:
      - get: image-resource
      - get: resource-tutorial
        #trigger: true     
      - task: create-output-file
        image: image-resource
        file: resource-tutorial/tasks/task_create_output.yml
        params:
          COMMAND: "((command-2))" # get credentials from credentials-file
          FILENAME: "((filename-2))" # get credentials from credentials-file
      - put: resource-s3-file-2
        params:
          file: /outputs/((filename-2))-*.txt # get credentials from credentials-file
          acl: public-read

  - name: read-file-1-from-s3-bucket
    public: true
    plan:
      - get: image-resource
      - get: resource-tutorial
      - get: resource-s3-file-1
        passed: [create-file-1-put-on-s3-bucket]
        trigger: true 
      - task: read-file-from-s3-bucket
        image: image-resource
        vars:
          RESOURCE: "resource-s3-file-1"
        params:
          PATHINPUT: "resource-s3-file-1"
          FILEINPUT: "((filename-1))" # get credentials from credentials-file
        file: resource-tutorial/tasks/task_show_output.yml
    on_success:
      put: notify
      params:
        text: "Congratulations! pipeline: $BUILD_PIPELINE_NAME > Job: $BUILD_JOB_NAME successed! "
    on_failure:
      put: notify
      params:
        text: "Alert! pipeline: $BUILD_PIPELINE_NAME > Job: $BUILD_JOB_NAME failed! "
    on_error:
      put: notify
      params:
        text: "Alert! pipeline: $BUILD_PIPELINE_NAME > Job: $BUILD_JOB_NAME got an error!" 
    on_abort:
      put: notify
      params:
        text: "Abort! pipeline: $BUILD_PIPELINE_NAME > Job: $BUILD_JOB_NAME aborted! " 

  - name: read-file-2-from-s3-bucket
    public: true
    plan:
      - get: image-resource
      - get: resource-tutorial
      - get: resource-s3-file-2
        passed: [create-file-2-put-on-s3-bucket]
        trigger: true 
      - task: read-file-from-s3-bucket
        image: image-resource
        vars:
          RESOURCE: "resource-s3-file-2"
        params:
          FILEINPUT: "((filename-2))" # get credentials from credentials-file
          PATHINPUT: "resource-s3-file-2"
        file: resource-tutorial/tasks/task_show_output.yml
    on_success:
      put: notify
      params:
        text: "Congratulations! pipeline: $BUILD_PIPELINE_NAME > Job: $BUILD_JOB_NAME successed! "
    on_failure:
      put: notify
      params:
        text: "Alert! pipeline: $BUILD_PIPELINE_NAME > Job: $BUILD_JOB_NAME failed! "
    on_error:
      put: notify
      params:
        text: "Alert! pipeline: $BUILD_PIPELINE_NAME > Job: $BUILD_JOB_NAME got an error!" 
    on_abort:
      put: notify
      params:
        text: "Abort! pipeline: $BUILD_PIPELINE_NAME > Job: $BUILD_JOB_NAME aborted! " 